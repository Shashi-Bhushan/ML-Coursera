Normal Equation
-------------------
Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. 
In the "Normal Equation" method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. 

The normal equation formula is given below:
θ = (XᵀX)⁻¹XᵀY

Question: How to minimize a quadratic function ?

Ans: Take derivative and set it to zero


----------------
There is no need to do feature scaling with the normal equation.

The following is a comparison of gradient descent and the normal equation:

Gradient Descent			Normal Equation
Need to choose alpha		No need to choose alpha
Needs many iterations		No need to iterate
O (kn²)						O (n³), need to calculate inverse of XᵀX
Works well when n is large	Slow if n is very large


With the normal equation, computing the inversion has complexity O(n³). So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.

==============================
∇ₐtr(AB) = Bᵀ

Suppose we have some fixes matrix B ε Rⁿˣᵐ 
We can then define a function f : Rⁿˣᵐ |→ R according to f(A) = tr(AB).								-- (1)
f(A) = 3A₁₁ + 2A₂₂ ...

if A ε Rᵐˣⁿ, then AB is a square matrix (m by m) and we can apply the trace operator to it.
f indeed map from Rᵐˣⁿ to R as it's input is a matrix A(B is a fixed/constant matrix) and output is a number.

So, ∇ₐf(A) will be a m by n matrix.
	= ∇ₐf(A) = Bᵀ
	= ∇ₐtr(AB) = Bᵀ		-- from (1)