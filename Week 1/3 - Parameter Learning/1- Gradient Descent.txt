=========================
Gradient Descent
=========================

Gradient Descent is an algorithm used to minimize the cost function J().
So we have our hypothesis function and we have a way of measuring how well it fits into the data. 
Now we need to estimate the parameters in the hypothesis function. That's where gradient descent comes in.

# How

We have Cost Function J(θ₀, θ₁)

we want to minimize θ₀ and θ₁

Imagine that we graph our hypothesis function based on its fields θ0 and θ1 (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.

We put θ0 on the x axis and θ1 on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. 
We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum.

The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate.

For example, the distance between each 'star' in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of J(θ0,θ1). Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.

# OUTLINE

- Start with any value of θ₀ and θ₁.
  We will choose θ₀ = 0 and θ₁ = 0 to start.
- Keep changing values of θ₀ and θ₁ until we find a minimum Cost

Starts at a point
Keep going downhill until you reach a point of local minimum value.

If I use another point in the plot as my starting point, I might reach a new local optimal solution.

# Gradient Descent Algorithm

repeat until convergence {
	θⱼ := θⱼ - α * [ ∂/∂θⱼJ(θ₀, θ₁) ] 	∀ j = 0 and j = 1                    
}

α - Learning Rate. It controls how big a step we take while descending downhill

# Correct Simultaneous Update

temp0 := θ₀ - α * [ ∂/∂θ₀J(θ₀, θ₁) ]
temp0 := θ₁ - α * [ ∂/∂θ₁J(θ₀, θ₁) ]

θ₀ := temp0
θ₁ := temp1

This means we update both the values simultaneously.